MISC:

timer in ./bin/main                             [done]
add constructs to allow for constant access     [done]
(do not need to generate res_graph etc)
clean up, sort network
change spit to accept a network

efficient maintanence of residual graph         [done]
remove, add max Ologn                           [done]

network store in_edges for each vertex          [done]
network store out_edges for each vertex         []

store the inflow and outflow of vertices        [done]

most time taken by vertex comparisons:          [done]
change vertexpointer to vertex?

need not flows of edges? enough with vertex     [done]
in/out flows?

better time remove                              [done]

store active vertices                           []
an active vertex is a vertex with exflow > 0
active vertex change = exflow change
exflow change = inflow, outflow change
inflow, outflow change only in add_flow 

instead of removing, I could add a guard to
make edges residual. residual edges are only
added and removed at two places. 
1. the initialization of the algorithm
2. when augmenting
At these places I could set a residual 
property to true/false

The residual edges are used at
1. find_min
2. networkedge_is_admissable
nowhere else.

Where do i iterate over residual edges?
* find_min
I could have a map is_residual that I check in  [done]
find_min
networkedge_admissable
turn out it's actually more expensive to check
this map, than to perform the remove explicitly.
aborting.

RENAMINGS:

set_* to replace*                               [done]
change variables of *collection to edges        [done]
change variables of *collection to vertices     [done]
array to collection                             [done]
edgeset to edgecollection                       [done]
vertexset to vertexcollection                   [done]

FUNCTIONS:

edgecollection_length                           [done]
vertexcollection_length                         [done]
array_length                                    [done]
exflow(vertex) = inflow - outflow               [done]
active(vertex) = exflow > 0                     [done]
distance_label(vertex)                          [done]
is_admissable(edge)                             [done]
network_residual                                ?
float residualal_capacity(networkedge)          [done]
network_edge_is_reverse                         [done]
networkvertex_distance_label                    [done]
edgecollection_remove                           [done]

TESTS FUNCTIONS:

graph_incident_with                             [done]
networkvertex_exflow                            [done]
network_active_vertex                           [done]
network_admissable_edge                         [] *
edgecollection_index_of                         [] * (needs to be the d+(v))
vertexcollection_index_of                       [] *
network_edge_is_residual                        [] *
edge_equals_reverse                             [] *
networkedge_augment                             [] *
networkvertex_set_distance_label                [done]
networkvertex_distance_label                    [done]
push_relabel                                    [] *
network_flow                                    []
graph_neighbours_of                             [] 
network_edge_is_reverse                         [done]

TESTS MODULES:

array.c                                         [done]
disjointset.c                                   [done]
edge.c                                          [done]
edgecollection.c                                [done]
graph.c                                         [done]
parser.c                                        [done]
spit.c                                          []
tokenizer.c                                     [done]
tokentable.c                                    [done]
tree.c                                          []
treevertex.c                                    []
util.c                                          []
vertex.c                                        [done]
vertexcollection.c                              []
network.c                                       []
main.c

